version: "3.9"

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 1s
      retries: 3
      start_period: 5s
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      psql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: [ "/bin/sh", "-c", "python main.py" ]

  psql:
    image: postgres:16.3-alpine3.19
    hostname: postgres
    container_name: postgres
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    shm_size: 256mb
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - psql_data:/var/lib/postgresql/data/


  redis:
    image: redis:7.0.9-alpine
    container_name: redis
    shm_size: 256mb
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data


  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: clickhouse
    shm_size: 256mb
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8123/ping || exit 1" ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse



  kafka:
    image: 'bitnami/kafka:3.3.1'
    container_name: kafka
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092" ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_INTER_BROKER_USER=kafka
      - KAFKA_INTER_BROKER_PASSWORD=kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/bitnami/kafka


  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080 || exit 1" ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_NAME=r4zt_wrqTRuT7W2NJsB_GA


volumes:
  redis_data:
  clickhouse_data:
  psql_data:
  kafka_data:
