name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  VERSION: ""
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}

jobs:

  code-quality:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: linter
        run: |
          pip install ruff
          ruff check

      #      - name: mypy # todo: fix the error in ci for mypy
      #        run: |
      #          pip install mypy
      #          mypy app/

      - name: bandit
        run: |
          pip install bandit bandit[toml]
          bandit -c=pyproject.toml app
  

  set-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Python and toml
        run: |
          pip install toml

      - name: Set VERSION
        id: set-version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=VERSION::$VERSION"
  

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ code-quality ,set-version ]
    env:
      VERSION: ${{ needs.set-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:$VERSION .

      - name: Upload Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $IMAGE_NAME:$VERSION

  test:
    needs: [ set-version, build ]
    timeout-minutes: 15
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.set-version.outputs.version }}
      POSTGRES_DSN: 'postgresql+psycopg://postgres:postgres@postgres:5432/dummy'
      POETRY_VERSION: 1.7.1
    services:
      postgres:
        image: postgres:16.3-alpine3.19
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dummy
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          pip install poetry==$POETRY_VERSION
          poetry install --only main  --no-root --no-ansi --no-interaction

      - name: Run tests
        run: |
          poetry run pytest --cov=app app/tests/    

